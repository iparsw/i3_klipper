[gcode_macro update_git]
gcode:
    {% set message = params.MESSAGE|default() %}
    {% if message %}
        RUN_SHELL_COMMAND CMD=update_git_script_message PARAMS="'{params.MESSAGE}'"
    {% else %}
        RUN_SHELL_COMMAND CMD=update_git_script
    {% endif %}

[gcode_shell_command update_git_script]
command: bash -c "bash $HOME/klipper-backup/script.sh"
timeout: 90.0
verbose: True

[gcode_shell_command update_git_script_message]
command: bash -c "bash $HOME/klipper-backup/script.sh -c \"$0\""
timeout: 90.0
verbose: True




####################################################################################
# START PRINT macro


[gcode_macro START_PRINT] 
gcode: 
      {% set BED_TEMP = params.BED_TEMP|float %}
      {% set HOTEND_TEMP = params.HOTEND_TEMP|float %}
      # Start bed heating for faster bed heating
      M140 S{BED_TEMP}
      
      # Use absolute coordinates 
      G90 
      # Home the printer 
      G28 
      # Reset extruder 
      G92 E0
      # Move to wait position (20 - 200 - 50)
      PARK_TOOLHEAD PARK_SPEED=15000  
      
      # Eject previous print if present 
      G1 X100 F12000 # (now in (100-200-50))
      G1 Z0.2 F480   # (now in (100-200-0.2))
      G1 Y20 F4000.0 # (now in (100-20-0.2))
      G1 X80 F12000  # (now in (80-20-0.2))
      G1 Z0.1 F480   # (now in (80-20-0.1))  (get lower to eject last prime)
      G1 Y0 F12000.0 # (now in (80-0-0.1))

      # Start pre heating nozzle
      M104 S{HOTEND_TEMP - 50}

      # Move back to wait position (20 - 200 - 50)
      PARK_TOOLHEAD PARK_SPEED=15000
      # G1 Z50 F480            # (now in (80-0-50))  old
      # G1 X20 Y200 F4000.0    # (now in (80-0-50))  old
      
      # Heat the bed and wait
      M190 S{BED_TEMP}
      
      BED_MESH_PROFILE LOAD=default   
      
      
      # Set and wait for nozzle to reach temperature 
      M109 S{HOTEND_TEMP}
      # Move Z axis Down 
      G1 Z2.0 F3000 
      # Move to start position 
      G1 X60 Y3 Z0.28 F5000.0 
      # Draw the first line
      G1 X100 Z0.28 F1000.0 E12.5 
      # Reset extruder 
      G92 E0


[gcode_macro EJECT_PREVIUS_PRINT]
gcode:
    # Use absolute coordinates 
    G90
    # Eject previous print if present 
    G1 X100 Y200 Z50 F12000 # (now in (100-200-50))
    G1 Z0.2 F480   # (now in (100-200-0.2))
    G1 Y20 F4000.0 # (now in (100-20-0.2))
    G1 X80 F12000  # (now in (80-20-0.2))
    G1 Z0.1 F480   # (now in (80-20-0.1))  (get lower to eject last prime)
    G1 Y0 F12000.0 # (now in (80-0-0.1))


[gcode_macro DRAW_PURGE_LINE]
gcode:
    # Move Z axis Down 
    G1 Z2.0 F3000 
    # Move to start position 
    G1 X60 Y3 Z0.28 F5000.0 
    # Draw the first line
    G1 X100 Z0.28 F1500.0 E12.5 
    # Reset extruder 
    G92 E0

[gcode_macro END_PRINT]
gcode:
    {% set MAX_PRINTHEIGHT = params.MAX_PRINTHEIGHT|default(50)|float %}
    # Turn off bed, extruder, and fan
    M140 S0
    M104 S0
    M106 S0
    # Move nozzle away from print while retracting
    G91
    # Raise nozzle by 10mm
    G1 X-2 Y-2 Z5 E-3 F24000
    # PARK nozzle by 10mm
    PARK_TOOLHEAD PARK_Z={ [MAX_PRINTHEIGHT + 40, 170]|min }
    G90
    # Disable steppers
    # M84


[gcode_macro PARK_TOOLHEAD]
gcode:
    # PARK POSITION
    #
    #   |############|
    #   |#(1)####(2)#|
    #   |############|
    #   |############|
    #   |#(3)####(4)#|
    #   |############|
    #
    {% set PARK_POS = params.PARK_POS|default(1)|float %}
    {% set PARK_Z = params.PARK_Z|default(50)|float %}
    {% set PARK_SPEED = params.PARK_SPEED|default(18000)|float %}
    # Use absolute coordinates 
    G90
    # PARK COMAND
    {% if PARK_POS == 1 %}
      G1 X20 Y200 Z{PARK_Z} F{PARK_SPEED}
    {% endif %}
    {% if PARK_POS == 2 %}
      G1 X200 Y200 Z{PARK_Z} F{PARK_SPEED}
    {% endif %}
    {% if PARK_POS == 3 %}
      G1 X20 Y20 Z{PARK_Z} F{PARK_SPEED}
    {% endif %}
    {% if PARK_POS == 4 %}
      G1 X200 Y200 Z{PARK_Z} F{PARK_SPEED}
    {% endif %}


####################################################################################
# filament macro
[gcode_macro UNLOAD_FILAMEN]
gcode:
  # Reset extruder
  M109 S200
  G92 E0
  G1 E-60 F600





####################################################################################
# START FAN macro

  


[gcode_macro _check_fan_params]
gcode:
  {% set MAXIMUM = params.MAXIMUM|default(
      printer["gcode_macro set_fan_scaling"].maximum)|int %}
  {% set MINIMUM = params.MINIMUM|default(
      printer["gcode_macro set_fan_scaling"].minimum)|int %}

  {% if params.SCALE and params.SCALE|float <= 0 %}
    { action_raise_error("SCALE must be a positive value.") }
  {% elif MINIMUM < 0 or MINIMUM > 255 %}
    { action_raise_error("MINIMUM must be between 0 and 255.") }
  {% elif MAXIMUM < 0 or MAXIMUM > 255 %}
    { action_raise_error("MAXIMUM must be between 0 and 255.") }
  {% elif params.SPEED and (params.SPEED|int < 0 or params.SPEED|int > 255) %}
    { action_raise_error("SPEED must be between 0 and 255.") }
  {% elif params.BOOST and (params.BOOST|int < 0 or params.BOOST|int > 255) %}
    { action_raise_error("BOOST must be between 0 and 255.") }
  {% elif MINIMUM > MAXIMUM %}
    { action_raise_error("MINIMUM must be less than or equal to MAXIMUM.") }
  {% endif %}

# Sets optional scaling factor, minimum, and maximum applied to M106 commmand.
# If a MINIMUM greater than 0 is specified the fan will not stop unless an
# M107 command is issued. SET_FAN_SCALING always displays the current paramaters
# if scaling is active. SET_FAN_SCALING without any arguments will display the
# current scaling parameters without changing them.
[gcode_macro set_fan_scaling]
description: Sets fan scaling factors applied to M106 command. If a speed is
  provided it will be adjusted according to the scaling parameters.
  Usage: SET_FAN_SCALING [SCALE=<scale>] [BOOST=<boost>] [MAXIMUM=<max>]
                         [MINIMUM=<min>] [SPEED=<speed>]
variable_scale: 1.0
variable_boost: 0
variable_minimum: 0
variable_maximum: 255
variable_real_speed: 0
gcode:
  _CHECK_FAN_PARAMS{% for k in params %}{' '~k~'='~params[k]}{% endfor %}
  {% set SCALE = params.SCALE|default(scale)|float %}
  {% set BOOST = params.BOOST|default(boost)|float %}
  {% set MAXIMUM = params.MAXIMUM|default(maximum)|int %}
  {% set MINIMUM = params.MINIMUM|default(minimum)|int %}
  {% set SPEED = params.SPEED|default(real_speed)|int %}

  {% if SCALE != 1.0 or BOOST != 0 or MAXIMUM != 255 or MINIMUM != 0 %}
    {action_respond_info("Fan: Scale: %.2f Minimum:%i Maximum: %i Speed: %i"|
                         format(SCALE, MINIMUM, MAXIMUM, SPEED))}
  {% endif %}

  # Update parameters on change.
  {% if params|length > 0 %}
    SET_GCODE_VARIABLE MACRO=set_fan_scaling VARIABLE=scale VALUE="{SCALE}"
    SET_GCODE_VARIABLE MACRO=set_fan_scaling VARIABLE=boost VALUE="{BOOST}"
    SET_GCODE_VARIABLE MACRO=set_fan_scaling VARIABLE=minimum VALUE="{MINIMUM}"
    SET_GCODE_VARIABLE MACRO=set_fan_scaling VARIABLE=maximum VALUE="{MAXIMUM}"
    # Run fan at adusted speed
    M106 S{SPEED}
  {% endif %}
  # Dummy argument block for Mainsail
  {% set dummy = None if True else "
  {% set dummy = params.SCALE|default(1.0)|float %}
  {% set dummy = params.BUMP|default(0)|int %}
  {% set dummy = params.MAXIMUM|default(255)|int %}
  {% set dummy = params.MINIMUM|default(0)|int %}
  {% set dummy = params.SPEED|default(current speed)|int %}
  " %} # End argument block for Mainsail

[gcode_macro reset_fan_scaling]
description: Clears all fan scaling factors.
  Usage: RESET_FAN_SCALING
gcode:
  SET_FAN_SCALING SCALE=1.0 BOOST=0 MAXIMUM=255 MINIMUM=0

[gcode_macro m106]
description: Wraps M106 to implement scaling overrides.
rename_existing: M106.6245197
gcode:
  {% set S = params.S|default(255)|int %}
  {% set scale = printer["gcode_macro set_fan_scaling"] %}
  SET_GCODE_VARIABLE MACRO=set_fan_scaling VARIABLE=real_speed VALUE="{S}"
  M106.6245197 S{((((S + scale.boost) * scale.scale) | round | int,
                   scale.minimum) | max, scale.maximum) | min}






####################################################################################
# arm macro

[gcode_macro OPEN_ARM]
gcode:
  SET_SERVO SERVO=arm_servo ANGLE=123

[gcode_macro CLOSE_ARM]
gcode:
  SET_SERVO SERVO=arm_servo ANGLE=0

[gcode_macro DISABLE_ARM]
gcode:
  SET_SERVO SERVO=arm_servo WIDTH=0


[gcode_macro FULLY_CLOSE_ARM]
gcode:
  SET_SERVO SERVO=arm_servo ANGLE=0    #(partially closing)
  SET_SERVO SERVO=arm_servo WIDTH=0    #(diabling closing)
  G91  # use relative coordinates
  G1 X20 F18000
  G90  # Use absolute coordinates
  G1 X9 Z17 F18000
  G1 X-9 F1200
  